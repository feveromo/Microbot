---
description: 
globs: 
alwaysApply: true
---
# Microbot Project Overview

Microbot is an open-source Old School RuneScape client based on RuneLite. It utilizes a plugin system to enable scripting capabilities.

## Key Concepts & Structure

- **Utility Classes**: Located under the Microbot Plugin's `util` folder (e.g., `runelite-client/src/main/java/net/runelite/client/plugins/microbot/util/`). These classes, such as `Rs2Player` and `Rs2Npc`, provide easier interaction with game elements.
- **Accessing Core Objects**: If a utility class doesn't cover a specific need, you can access RuneLite's exposed objects directly via the `Microbot` object. For example, to get a player's location:
  ```java
  Microbot.getClient().getLocalPlayer().getWorldLocation()
  ```
- **Example Script**: An `ExampleScript.java` ([runelite-client/src/main/java/net/runelite/client/plugins/microbot/example/ExampleScript.java](mdc:runelite-client/src/main/java/net/runelite/client/plugins/microbot/example/ExampleScript.java)) is available to demonstrate API usage.
- **Script Components**: Scripts typically consist of:
    - `Config`: Settings for the script.
    - `Overlay`: Visual overlay for the script.
    - `Plugin`: Handles starting and stopping the script.
    - `Script`: Contains the core logic executed by Microbot.
- **Plugin Startup**: The `startUp()` method within a plugin is used to initiate a script, for example:
  ```java
  exampleScript.run(config);
  ```

## Development & Setup

- **First-Time Setup**: For initial project setup as a developer, refer to the guide: [Building with IntelliJ IDEA](mdc:https:/github.com/chsami/microbot/wiki/Building-with-IntelliJ-IDEA)
- **Jagex Accounts**: For setting up with Jagex accounts, see: [Using Jagex Accounts](mdc:https:/github.com/runelite/runelite/wiki/Using-Jagex-Accounts)

## Learning & Support

- **Microbot GPT**: Learn how to write scripts using the [Microbot GPT Chatbot](mdc:https:/chatgpt.com/g/g-LM0fGeeXB-microbot-documentation).
- **Discord**: Join the [Discord community](mdc:https:/discord.gg/zaGrfqFEWE) for questions and support.
- **README**: For more general information, refer to the main [README.md](mdc:README.md).

## Microbot Plugin Structure (`runelite-client/.../plugins/microbot`)

The `runelite-client/src/main/java/net/runelite/client/plugins/microbot/` directory is central to Microbot's scripting capabilities. It houses individual plugins, each typically residing in its own subdirectory.

- **Individual Plugins**: Each subdirectory within `plugins/microbot/` (e.g., `agility/`, `woodcutting/`, `fishing/`, `example/`) represents a distinct script or plugin. These folders will contain the necessary Java files for that specific plugin's functionality.
- **Core Components within Plugins**: Within each individual plugin's directory (e.g., `runelite-client/.../plugins/microbot/example/`), you will typically find:
    - A `YourPluginNamePlugin.java` file (e.g., `ExamplePlugin.java`): Manages the plugin lifecycle (startup, shutdown) and integrates with the RuneLite client.
    - A `YourPluginNameScript.java` file (e.g., `ExampleScript.java`): Contains the core automation logic and game interaction code.
    - A `YourPluginNameConfig.java` file (e.g., `ExampleConfig.java`): Defines configurable settings for the script, often exposed in the RuneLite UI.
    - A `YourPluginNameOverlay.java` file (e.g., `ExampleOverlay.java`): Handles any custom visual overlays on the game screen related to the script.
- **Shared Utilities**: The `util/` directory ([runelite-client/src/main/java/net/runelite/client/plugins/microbot/util/](mdc:runelite-client/src/main/java/net/runelite/client/plugins/microbot/util)) contains shared utility classes (like `Rs2Player`, `Rs2Npc`, `Rs2GameObject`) used across multiple plugins to simplify common tasks and game interactions.
- **Example Plugin**: The `example/` directory ([runelite-client/src/main/java/net/runelite/client/plugins/microbot/example/](mdc:runelite-client/src/main/java/net/runelite/client/plugins/microbot/example)) serves as a template and practical guide for developing new scripts. It showcases the typical structure and usage of the Microbot API.
- **Core Files**: Files directly within the `microbot/` directory like `BlockingEventManager.java`, `IScript.java` are likely core framework components for managing scripts and their execution.

## Understanding the Utility Layer (`runelite-client/.../plugins/microbot/util`)

The `util/` directory ([runelite-client/src/main/java/net/runelite/client/plugins/microbot/util/](mdc:runelite-client/src/main/java/net/runelite/client/plugins/microbot/util)) is a cornerstone of Microbot scripting. It provides a rich set of pre-built classes and methods to abstract and simplify common interactions with the Old School RuneScape game client. These utilities are prefixed with `Rs2` (e.g., `Rs2Player`, `Rs2Npc`, `Rs2GameObject`) or are otherwise organized into logical subdirectories for ease of use.

**Key Goals of the Utility Layer:**
- **Simplify Common Tasks**: Reduce boilerplate code for actions like interacting with NPCs, managing inventory, clicking on objects, navigating the game world, etc.
- **Promote Code Reusability**: Offer a standardized way to perform game actions, ensuring consistency across different scripts.
- **Abstract Complexities**: Hide the lower-level details of interacting with the RuneLite API and game client, making script development more accessible.

**How to Use the Utilities:**
When writing a script, you will frequently import and use classes from this `util` directory. For example:
- To interact with NPCs (attack, talk to): You would likely use methods from a class within `util/npc/` (e.g., `Rs2Npc.attack("Goblin")`).
- To manage player inventory (check for items, use items): Classes in `util/inventory/` (e.g., `Rs2Inventory.contains("Logs")`) would be relevant.
- For game object interactions (click on a bank booth, open a door): Utilities in `util/gameobject/` (e.g., `Rs2GameObject.findObjectAndClick("Bank booth")`) would be used.
- To control the player character (walking, running): Classes in `util/walker/` or `util/player/` would be employed.

**Structure of the `util` Directory:**
The `util` directory is organized into subdirectories, each focusing on a specific aspect of game interaction. Based on the provided structure, here are some examples:
- `util/bank/`: For banking operations (e.g., `Rs2Bank`).
- `util/combat/`: For combat-related actions.
- `util/equipment/`: For managing worn equipment.
- `util/gameobject/`: For interacting with in-game objects (e.g., `Rs2GameObject`).
- `util/grounditem/`: For interacting with items on the ground (e.g., `Rs2GroundItem`).
- `util/inventory/`: For inventory management (e.g., `Rs2Inventory`).
- `util/keyboard/`: For simulating keyboard inputs.
- `util/magic/`: For casting spells.
- `util/menu/`: For interacting with right-click menus.
- `util/mouse/`: For simulating mouse movements and clicks (e.g., `Rs2Mouse`).
- `util/npc/`: For interacting with Non-Player Characters (e.g., `Rs2Npc`).
- `util/player/`: For player-specific actions and information (e.g., `Rs2Player`).
- `util/prayer/`: For managing prayers.
- `util/tabs/`: For interacting with game interface tabs.
- `util/tile/`: For tile-based calculations and interactions.
- `util/walker/`: For pathfinding and movement (e.g., `Rs2Walker`).
- `util/widget/`: For interacting with game interface widgets/components (e.g., `Rs2Widget`).

Files like `ActorModel.java`, `Global.java`, and `Rs2InventorySetup.java` directly within `util/` likely provide more general utility functions or foundational classes used by other utilities.

By leveraging these utilities, developers can build more complex and robust scripts with less effort, focusing on the script's logic rather than the intricacies of game client interaction.

